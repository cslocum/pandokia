:
# This is a set of helper functions for tests written for shell_runner.
# This is a bourne shell script, so you can use it with /bin/sh, bash,
# or presumably with other bourne shell compatibles.
#
#
# These tools implement output/reference files.  Your test creates an
# output file.  The function testfile compares it to a reference file.
# If they are the same, the test passes.  If not, the test fails.
# Normally, you expect an error the first time because there is no
# reference file.  To make a failing/erroring test pass, use "pdk ok"
# on the okfile that is left behind after running the test.
#
# To use it:
#
#	# load these functions
#	. pdk_shell_runner_helper
#
#	# run your software
#	my_program > my_output_file 2> other_output_file
#
#	# compare the files created
#	testfile diff my_output_file	# use this if you want diff output
#
#	testfile cmp other_output_file	# use this if your output is binary
#
#	# use the exit status left behind by testfile
#	exit $teststatus
#

# Unless we decide otherwise, the test passes
teststatus=0

# Find the name of the okfile.  Note that $0 is going to be the name of
# the script containing the test, not the name of this library function
okfile=`basename $0`.okfile

# purge any old okfile sitting around
rm -f $okfile

# Here is the function to compare output files.  Call it once for each
# output file.
function testfile {
	# testfile $cmd $file
	#
	# cmd is one of:
	#	cmp
	#	diff
	#
	# file is the output file you just created
	#
	# the reference file is created automatically
	#

	cmd=$1
	file=$2

	echo "Comparing output file $file"
	echo $file ref/$file >> $okfile

	# We expect the user to pass in the name of the diff command to use.
	# I want to choose "diff" or "cmp", but you can also add in parameters
	# to the comparison.
	$cmd $file ref/$file
	st=$?

	echo ''

	# elevate the exit status if the result of this comparison is
	# worse than a previous one.
	#
	# cmp and diff use these exit codes:
	#	0 - files match
	#	1 - files do not match
	#	2 - problem with comparison

	case $st
	in
	0) 
		:
		;;
	1)
		# raise teststatus from 0 to 1, but do not lower it from 128
		if [ $teststatus -eq 0 ]
		then
			# status 1 will log the test result as Fail
			teststatus=1
		fi
		;;
	*)
		# status 128 will log the test result as Error
		teststatus=128
		;;
	esac
}

