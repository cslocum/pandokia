

START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/doctest/a.doctest
test_runner=doctest
context=default_context
SETDEFAULT
test_name=doctest/a/Cookie
status=P
start_time=2009-08-12 17:09:27.262
end_time=2009-08-12 17:09:27.269
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal
status=P
start_time=2009-08-12 17:09:27.618
end_time=2009-08-12 17:09:27.634
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.abs
status=P
start_time=2009-08-12 17:09:27.636
end_time=2009-08-12 17:09:27.637
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.add
status=P
start_time=2009-08-12 17:09:27.639
end_time=2009-08-12 17:09:27.640
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.compare
status=P
start_time=2009-08-12 17:09:27.640
end_time=2009-08-12 17:09:27.642
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.divide
status=P
start_time=2009-08-12 17:09:27.642
end_time=2009-08-12 17:09:27.644
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.divide_int
status=P
start_time=2009-08-12 17:09:27.645
end_time=2009-08-12 17:09:27.646
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.max
status=P
start_time=2009-08-12 17:09:27.648
end_time=2009-08-12 17:09:27.649
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.min
status=P
start_time=2009-08-12 17:09:27.650
end_time=2009-08-12 17:09:27.650
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.minus
status=P
start_time=2009-08-12 17:09:27.652
end_time=2009-08-12 17:09:27.652
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.multiply
status=P
start_time=2009-08-12 17:09:27.654
end_time=2009-08-12 17:09:27.655
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.normalize
status=P
start_time=2009-08-12 17:09:27.656
end_time=2009-08-12 17:09:27.657
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.plus
status=P
start_time=2009-08-12 17:09:27.658
end_time=2009-08-12 17:09:27.658
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.power
status=P
start_time=2009-08-12 17:09:27.659
end_time=2009-08-12 17:09:27.662
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.quantize
status=P
start_time=2009-08-12 17:09:27.663
end_time=2009-08-12 17:09:27.666
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.remainder
status=P
start_time=2009-08-12 17:09:27.666
end_time=2009-08-12 17:09:27.668
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.remainder_near
status=P
start_time=2009-08-12 17:09:27.669
end_time=2009-08-12 17:09:27.674
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.same_quantum
status=P
start_time=2009-08-12 17:09:27.674
end_time=2009-08-12 17:09:27.675
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.sqrt
status=P
start_time=2009-08-12 17:09:27.675
end_time=2009-08-12 17:09:27.689
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.subtract
status=P
start_time=2009-08-12 17:09:27.690
end_time=2009-08-12 17:09:27.691
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Context.to_integral
status=P
start_time=2009-08-12 17:09:27.692
end_time=2009-08-12 17:09:27.693
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/decimal.Decimal.__new__
status=P
start_time=2009-08-12 17:09:27.694
end_time=2009-08-12 17:09:27.694
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.Differ
status=P
start_time=2009-08-12 17:09:28.033
end_time=2009-08-12 17:09:28.040
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.Differ._fancy_replace
status=P
start_time=2009-08-12 17:09:28.041
end_time=2009-08-12 17:09:28.042
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.Differ._qformat
status=P
start_time=2009-08-12 17:09:28.043
end_time=2009-08-12 17:09:28.043
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.Differ.compare
status=P
start_time=2009-08-12 17:09:28.044
end_time=2009-08-12 17:09:28.045
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.IS_CHARACTER_JUNK
status=P
start_time=2009-08-12 17:09:28.045
end_time=2009-08-12 17:09:28.045
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.IS_LINE_JUNK
status=P
start_time=2009-08-12 17:09:28.046
end_time=2009-08-12 17:09:28.047
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher
status=P
start_time=2009-08-12 17:09:28.047
end_time=2009-08-12 17:09:28.048
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.find_longest_match
status=P
start_time=2009-08-12 17:09:28.049
end_time=2009-08-12 17:09:28.049
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.get_grouped_opcodes
status=P
start_time=2009-08-12 17:09:28.050
end_time=2009-08-12 17:09:28.052
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.get_matching_blocks
status=P
start_time=2009-08-12 17:09:28.052
end_time=2009-08-12 17:09:28.052
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.get_opcodes
status=P
start_time=2009-08-12 17:09:28.053
end_time=2009-08-12 17:09:28.053
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.ratio
status=P
start_time=2009-08-12 17:09:28.054
end_time=2009-08-12 17:09:28.054
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.set_seq1
status=P
start_time=2009-08-12 17:09:28.055
end_time=2009-08-12 17:09:28.055
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.set_seq2
status=P
start_time=2009-08-12 17:09:28.056
end_time=2009-08-12 17:09:28.056
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.SequenceMatcher.set_seqs
status=P
start_time=2009-08-12 17:09:28.056
end_time=2009-08-12 17:09:28.057
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib._count_leading
status=P
start_time=2009-08-12 17:09:28.057
end_time=2009-08-12 17:09:28.057
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.context_diff
status=P
start_time=2009-08-12 17:09:28.058
end_time=2009-08-12 17:09:28.059
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.get_close_matches
status=P
start_time=2009-08-12 17:09:28.059
end_time=2009-08-12 17:09:28.063
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.ndiff
status=P
start_time=2009-08-12 17:09:28.063
end_time=2009-08-12 17:09:28.064
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.restore
status=P
start_time=2009-08-12 17:09:28.064
end_time=2009-08-12 17:09:28.065
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/a/difflib.unified_diff
status=P
start_time=2009-08-12 17:09:28.066
end_time=2009-08-12 17:09:28.066
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END


START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/doctest/b.doctest
test_runner=doctest
context=default_context
SETDEFAULT
test_name=doctest/b/test.test_generators.test_main
status=P
start_time=2009-08-12 17:09:28.450
end_time=2009-08-12 17:09:28.557
tda_testtype=<class 'nose.case.FunctionTestCase'>
log:
.Trying:
.    for c in conjoin([lambda: iter((0, 1))] * 3):
.        print c
.Expecting:
.    [0, 0, 0]
.    [0, 0, 1]
.    [0, 1, 0]
.    [0, 1, 1]
.    [1, 0, 0]
.    [1, 0, 1]
.    [1, 1, 0]
.    [1, 1, 1]
.ok
.Trying:
.    def gencopy(iterator):
.        for x in iterator:
.            yield x[:]
.Expecting nothing
.ok
.Trying:
.    for n in range(10):
.        all = list(gencopy(conjoin([lambda: iter((0, 1))] * n)))
.        print n, len(all), all[0] == [0] * n, all[-1] == [1] * n
.Expecting:
.    0 1 True True
.    1 2 True True
.    2 4 True True
.    3 8 True True
.    4 16 True True
.    5 32 True True
.    6 64 True True
.    7 128 True True
.    8 256 True True
.    9 512 True True
.ok
.Trying:
.    q = Queens(8)
.Expecting nothing
.ok
.Trying:
.    LIMIT = 2
.Expecting nothing
.ok
.Trying:
.    count = 0
.Expecting nothing
.ok
.Trying:
.    for row2col in q.solve():
.        count += 1
.        if count <= LIMIT:
.            print "Solution", count
.            q.printsolution(row2col)
.Expecting:
.    Solution 1
.    +-+-+-+-+-+-+-+-+
.    |Q| | | | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | |Q| | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | | | | |Q|
.    +-+-+-+-+-+-+-+-+
.    | | | | | |Q| | |
.    +-+-+-+-+-+-+-+-+
.    | | |Q| | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | | | |Q| |
.    +-+-+-+-+-+-+-+-+
.    | |Q| | | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | |Q| | | | |
.    +-+-+-+-+-+-+-+-+
.    Solution 2
.    +-+-+-+-+-+-+-+-+
.    |Q| | | | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | | |Q| | |
.    +-+-+-+-+-+-+-+-+
.    | | | | | | | |Q|
.    +-+-+-+-+-+-+-+-+
.    | | |Q| | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | | | |Q| |
.    +-+-+-+-+-+-+-+-+
.    | | | |Q| | | | |
.    +-+-+-+-+-+-+-+-+
.    | |Q| | | | | | |
.    +-+-+-+-+-+-+-+-+
.    | | | | |Q| | | |
.    +-+-+-+-+-+-+-+-+
.ok
.Trying:
.    print count, "solutions in all."
.Expecting:
.    92 solutions in all.
.ok
.Trying:
.    k = Knights(10, 10)
.Expecting nothing
.ok
.Trying:
.    LIMIT = 2
.Expecting nothing
.ok
.Trying:
.    count = 0
.Expecting nothing
.ok
.Trying:
.    for x in k.solve():
.        count += 1
.        if count <= LIMIT:
.            print "Solution", count
.            k.printsolution(x)
.        else:
.            break
.Expecting:
.    Solution 1
.    +---+---+---+---+---+---+---+---+---+---+
.    |  1| 58| 27| 34|  3| 40| 29| 10|  5|  8|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 26| 35|  2| 57| 28| 33|  4|  7| 30| 11|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 59|100| 73| 36| 41| 56| 39| 32|  9|  6|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 74| 25| 60| 55| 72| 37| 42| 49| 12| 31|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 61| 86| 99| 76| 63| 52| 47| 38| 43| 50|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 24| 75| 62| 85| 54| 71| 64| 51| 48| 13|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 87| 98| 91| 80| 77| 84| 53| 46| 65| 44|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 90| 23| 88| 95| 70| 79| 68| 83| 14| 17|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 97| 92| 21| 78| 81| 94| 19| 16| 45| 66|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 22| 89| 96| 93| 20| 69| 82| 67| 18| 15|
.    +---+---+---+---+---+---+---+---+---+---+
.    Solution 2
.    +---+---+---+---+---+---+---+---+---+---+
.    |  1| 58| 27| 34|  3| 40| 29| 10|  5|  8|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 26| 35|  2| 57| 28| 33|  4|  7| 30| 11|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 59|100| 73| 36| 41| 56| 39| 32|  9|  6|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 74| 25| 60| 55| 72| 37| 42| 49| 12| 31|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 61| 86| 99| 76| 63| 52| 47| 38| 43| 50|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 24| 75| 62| 85| 54| 71| 64| 51| 48| 13|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 87| 98| 89| 80| 77| 84| 53| 46| 65| 44|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 90| 23| 92| 95| 70| 79| 68| 83| 14| 17|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 97| 88| 21| 78| 81| 94| 19| 16| 45| 66|
.    +---+---+---+---+---+---+---+---+---+---+
.    | 22| 91| 96| 93| 20| 69| 82| 67| 18| 15|
.    +---+---+---+---+---+---+---+---+---+---+
.ok
.Trying:
.    def f():
.        print (yield 1)
.        yield 2
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting:
.    1
.ok
.Trying:
.    g.send(42)
.Expecting:
.    42
.    2
.ok
.Trying:
.    f().send("foo")
.Expecting:
.    Traceback (most recent call last):
.    ...
.    TypeError: can't send non-None value to a just-started generator
.ok
.Trying:
.    def f(): yield
.Expecting nothing
.ok
.Trying:
.    list(f())
.Expecting:
.    [None]
.ok
.Trying:
.    list((yield 21) for i in range(4))
.Expecting:
.    [21, None, 21, None, 21, None, 21, None]
.ok
.Trying:
.    def f(): list(i for i in [(yield 26)])
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def coroutine(seq):
.        count = 0
.        while count < 200:
.            count += yield
.            seq.append(count)
.Expecting nothing
.ok
.Trying:
.    seq = []
.Expecting nothing
.ok
.Trying:
.    c = coroutine(seq)
.Expecting nothing
.ok
.Trying:
.    c.next()
.Expecting nothing
.ok
.Trying:
.    print seq
.Expecting:
.    []
.ok
.Trying:
.    c.send(10)
.Expecting nothing
.ok
.Trying:
.    print seq
.Expecting:
.    [10]
.ok
.Trying:
.    c.send(10)
.Expecting nothing
.ok
.Trying:
.    print seq
.Expecting:
.    [10, 20]
.ok
.Trying:
.    c.send(10)
.Expecting nothing
.ok
.Trying:
.    print seq
.Expecting:
.    [10, 20, 30]
.ok
.Trying:
.    f=lambda: (yield 1),(yield 2)
.Expecting:
.    Traceback (most recent call last):
.      ...
.    SyntaxError: 'yield' outside function (<doctest test.test_generators.__test__.coroutine[21]>, line 1)
.ok
.Trying:
.    def f(): return lambda x=(yield): 1
.Expecting:
.    Traceback (most recent call last):
.      ...
.    SyntaxError: 'return' with argument inside generator (<doctest test.test_generators.__test__.coroutine[22]>, line 1)
.ok
.Trying:
.    def f(): x = yield = y
.Expecting:
.    Traceback (most recent call last):
.      ...
.    SyntaxError: assignment to yield expression not possible (<doctest test.test_generators.__test__.coroutine[23]>, line 1)
.ok
.Trying:
.    def f(): (yield bar) = y
.Expecting:
.    Traceback (most recent call last):
.      ...
.    SyntaxError: can't assign to yield expression (<doctest test.test_generators.__test__.coroutine[24]>, line 1)
.ok
.Trying:
.    def f(): (yield bar) += y
.Expecting:
.    Traceback (most recent call last):
.      ...
.    SyntaxError: augmented assignment to yield expression not possible (<doctest test.test_generators.__test__.coroutine[25]>, line 1)
.ok
.Trying:
.    def f():
.        while True:
.            try:
.                print (yield)
.            except ValueError,v:
.                print "caught ValueError (%s)" % (v),
.Expecting nothing
.ok
.Trying:
.    import sys
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    g.throw(ValueError) # type only
.Expecting:
.    caught ValueError ()
.ok
.Trying:
.    g.throw(ValueError("xyz"))  # value only
.Expecting:
.    caught ValueError (xyz)
.ok
.Trying:
.    g.throw(ValueError, ValueError(1))   # value+matching type
.Expecting:
.    caught ValueError (1)
.ok
.Trying:
.    g.throw(ValueError, TypeError(1))  # mismatched type, rewrapped
.Expecting:
.    caught ValueError (1)
.ok
.Trying:
.    g.throw(ValueError, ValueError(1), None)   # explicit None traceback
.Expecting:
.    caught ValueError (1)
.ok
.Trying:
.    g.throw(ValueError(1), "foo")       # bad args
.Expecting:
.    Traceback (most recent call last):
.      ...
.    TypeError: instance exception may not have a separate value
.ok
.Trying:
.    g.throw(ValueError, "foo", 23)      # bad args
.Expecting:
.    Traceback (most recent call last):
.      ...
.    TypeError: throw() third argument must be a traceback object
.ok
.Trying:
.    def throw(g,exc):
.        try:
.            raise exc
.        except:
.            g.throw(*sys.exc_info())
.Expecting nothing
.ok
.Trying:
.    throw(g,ValueError) # do it with traceback included
.Expecting:
.    caught ValueError ()
.ok
.Trying:
.    g.send(1)
.Expecting:
.    1
.ok
.Trying:
.    throw(g,TypeError)  # terminate the generator
.Expecting:
.    Traceback (most recent call last):
.      ...
.    TypeError
.ok
.Trying:
.    print g.gi_frame
.Expecting:
.    None
.ok
.Trying:
.    g.send(2)
.Expecting:
.    Traceback (most recent call last):
.      ...
.    StopIteration
.ok
.Trying:
.    g.throw(ValueError,6)       # throw on closed generator
.Expecting:
.    Traceback (most recent call last):
.      ...
.    ValueError: 6
.ok
.Trying:
.    f().throw(ValueError,7)     # throw on just-opened generator
.Expecting:
.    Traceback (most recent call last):
.      ...
.    ValueError: 7
.ok
.Trying:
.    f().throw("abc")     # throw on just-opened generator
.Expecting:
.    Traceback (most recent call last):
.      ...
.    abc
.ok
.Trying:
.    def f():
.        try: yield
.        except GeneratorExit:
.            print "exiting"
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    g.close()
.Expecting:
.    exiting
.ok
.Trying:
.    g.close()  # should be no-op now
.Expecting nothing
.ok
.Trying:
.    f().close()  # close on just-opened generator should be fine
.Expecting nothing
.ok
.Trying:
.    def f(): yield      # an even simpler generator
.Expecting nothing
.ok
.Trying:
.    f().close()         # close before opening
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    g.close()           # close normally
.Expecting nothing
.ok
.Trying:
.    def f():
.        try: yield
.        finally:
.            print "exiting"
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    del g
.Expecting:
.    exiting
.ok
.Trying:
.    def f():
.        try: yield
.        except GeneratorExit:
.            yield "foo!"
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    g.close()
.Expecting:
.    Traceback (most recent call last):
.      ...
.    RuntimeError: generator ignored GeneratorExit
.ok
.Trying:
.    g.close()
.Expecting nothing
.ok
.Trying:
.    import sys, StringIO
.Expecting nothing
.ok
.Trying:
.    old, sys.stderr = sys.stderr, StringIO.StringIO()
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    del g
.Expecting nothing
.ok
.Trying:
.    sys.stderr.getvalue().startswith(
.        "Exception exceptions.RuntimeError: 'generator ignored GeneratorExit' in "
.    )
.Expecting:
.    True
.ok
.Trying:
.    sys.stderr = old
.Expecting nothing
.ok
.Trying:
.    def f():
.        try: yield
.        except GeneratorExit:
.            raise TypeError("fie!")
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting nothing
.ok
.Trying:
.    g.close()
.Expecting:
.    Traceback (most recent call last):
.      ...
.    TypeError: fie!
.ok
.Trying:
.    def f(): x += yield
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f(): x = yield
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f(): lambda x=(yield): 1
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f(): x=(i for i in (yield) if (yield))
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f(d): d[(yield "a")] = d[(yield "b")] = 27
.Expecting nothing
.ok
.Trying:
.    data = [1,2]
.Expecting nothing
.ok
.Trying:
.    g = f(data)
.Expecting nothing
.ok
.Trying:
.    type(g)
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    g.send(None)
.Expecting:
.    'a'
.ok
.Trying:
.    data
.Expecting:
.    [1, 2]
.ok
.Trying:
.    g.send(0)
.Expecting:
.    'b'
.ok
.Trying:
.    data
.Expecting:
.    [27, 2]
.ok
.Trying:
.    try: g.send(1)
.    except StopIteration: pass
.Expecting nothing
.ok
.Trying:
.    data
.Expecting:
.    [27, 27]
.ok
.Trying:
.    def g():
.        for i in range(3):
.            yield None
.        yield None
.        return
.Expecting nothing
.ok
.Trying:
.    list(g())
.Expecting:
.    [None, None, None, None]
.ok
.Trying:
.    def g():
.        yield 1
.        try:
.            raise StopIteration
.        except:
.            yield 2
.        yield 3
.Expecting nothing
.ok
.Trying:
.    list(g())
.Expecting:
.    [1, 2, 3]
.ok
.Trying:
.    def gcomb(x, k):
.        "Generate all combinations of k elements from list x."
.
.        if k > len(x):
.            return
.        if k == 0:
.            yield []
.        else:
.            first, rest = x[0], x[1:]
.            # A combination does or doesn't contain first.
.            # If it does, the remainder is a k-1 comb of rest.
.            for c in gcomb(rest, k-1):
.                c.insert(0, first)
.                yield c
.            # If it doesn't contain first, it's a k comb of rest.
.            for c in gcomb(rest, k):
.                yield c
.Expecting nothing
.ok
.Trying:
.    seq = range(1, 5)
.Expecting nothing
.ok
.Trying:
.    for k in range(len(seq) + 2):
.        print "%d-combs of %s:" % (k, seq)
.        for c in gcomb(seq, k):
.            print "   ", c
.Expecting:
.    0-combs of [1, 2, 3, 4]:
.        []
.    1-combs of [1, 2, 3, 4]:
.        [1]
.        [2]
.        [3]
.        [4]
.    2-combs of [1, 2, 3, 4]:
.        [1, 2]
.        [1, 3]
.        [1, 4]
.        [2, 3]
.        [2, 4]
.        [3, 4]
.    3-combs of [1, 2, 3, 4]:
.        [1, 2, 3]
.        [1, 2, 4]
.        [1, 3, 4]
.        [2, 3, 4]
.    4-combs of [1, 2, 3, 4]:
.        [1, 2, 3, 4]
.    5-combs of [1, 2, 3, 4]:
.ok
.Trying:
.    def g():
.        yield 1
.Expecting nothing
.ok
.Trying:
.    type(g)
.Expecting:
.    <type 'function'>
.ok
.Trying:
.    i = g()
.Expecting nothing
.ok
.Trying:
.    type(i)
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    [s for s in dir(i) if not s.startswith('_')]
.Expecting:
.    ['close', 'gi_frame', 'gi_running', 'next', 'send', 'throw']
.ok
.Trying:
.    print i.next.__doc__
.Expecting:
.    x.next() -> the next value, or raise StopIteration
.ok
.Trying:
.    iter(i) is i
.Expecting:
.    True
.ok
.Trying:
.    import types
.Expecting nothing
.ok
.Trying:
.    isinstance(i, types.GeneratorType)
.Expecting:
.    True
.ok
.Trying:
.    i.gi_running
.Expecting:
.    0
.ok
.Trying:
.    type(i.gi_frame)
.Expecting:
.    <type 'frame'>
.ok
.Trying:
.    i.gi_running = 42
.Expecting:
.    Traceback (most recent call last):
.      ...
.    TypeError: readonly attribute
.ok
.Trying:
.    def g():
.        yield me.gi_running
.Expecting nothing
.ok
.Trying:
.    me = g()
.Expecting nothing
.ok
.Trying:
.    me.gi_running
.Expecting:
.    0
.ok
.Trying:
.    me.next()
.Expecting:
.    1
.ok
.Trying:
.    me.gi_running
.Expecting:
.    0
.ok
.Trying:
.    class disjointSet:
.        def __init__(self, name):
.            self.name = name
.            self.parent = None
.            self.generator = self.generate()
.
.        def generate(self):
.            while not self.parent:
.                yield self
.            for x in self.parent.generator:
.                yield x
.
.        def find(self):
.            return self.generator.next()
.
.        def union(self, parent):
.            if self.parent:
.                raise ValueError("Sorry, I'm not a root!")
.            self.parent = parent
.
.        def __str__(self):
.            return self.name
.Expecting nothing
.ok
.Trying:
.    names = "ABCDEFGHIJKLM"
.Expecting nothing
.ok
.Trying:
.    sets = [disjointSet(name) for name in names]
.Expecting nothing
.ok
.Trying:
.    roots = sets[:]
.Expecting nothing
.ok
.Trying:
.    import random
.Expecting nothing
.ok
.Trying:
.    gen = random.WichmannHill(42)
.Expecting nothing
.ok
.Trying:
.    while 1:
.        for s in sets:
.            print "%s->%s" % (s, s.find()),
.        print
.        if len(roots) > 1:
.            s1 = gen.choice(roots)
.            roots.remove(s1)
.            s2 = gen.choice(roots)
.            s1.union(s2)
.            print "merged", s1, "into", s2
.        else:
.            break
.Expecting:
.    A->A B->B C->C D->D E->E F->F G->G H->H I->I J->J K->K L->L M->M
.    merged D into G
.    A->A B->B C->C D->G E->E F->F G->G H->H I->I J->J K->K L->L M->M
.    merged C into F
.    A->A B->B C->F D->G E->E F->F G->G H->H I->I J->J K->K L->L M->M
.    merged L into A
.    A->A B->B C->F D->G E->E F->F G->G H->H I->I J->J K->K L->A M->M
.    merged H into E
.    A->A B->B C->F D->G E->E F->F G->G H->E I->I J->J K->K L->A M->M
.    merged B into E
.    A->A B->E C->F D->G E->E F->F G->G H->E I->I J->J K->K L->A M->M
.    merged J into G
.    A->A B->E C->F D->G E->E F->F G->G H->E I->I J->G K->K L->A M->M
.    merged E into G
.    A->A B->G C->F D->G E->G F->F G->G H->G I->I J->G K->K L->A M->M
.    merged M into G
.    A->A B->G C->F D->G E->G F->F G->G H->G I->I J->G K->K L->A M->G
.    merged I into K
.    A->A B->G C->F D->G E->G F->F G->G H->G I->K J->G K->K L->A M->G
.    merged K into A
.    A->A B->G C->F D->G E->G F->F G->G H->G I->A J->G K->A L->A M->G
.    merged F into A
.    A->A B->G C->A D->G E->G F->A G->G H->G I->A J->G K->A L->A M->G
.    merged A into G
.    A->G B->G C->G D->G E->G F->G G->G H->G I->G J->G K->G L->G M->G
.ok
.Trying:
.    def firstn(g, n):
.        return [g.next() for i in range(n)]
.Expecting nothing
.ok
.Trying:
.    def intsfrom(i):
.        while 1:
.            yield i
.            i += 1
.Expecting nothing
.ok
.Trying:
.    firstn(intsfrom(5), 7)
.Expecting:
.    [5, 6, 7, 8, 9, 10, 11]
.ok
.Trying:
.    def exclude_multiples(n, ints):
.        for i in ints:
.            if i % n:
.                yield i
.Expecting nothing
.ok
.Trying:
.    firstn(exclude_multiples(3, intsfrom(1)), 6)
.Expecting:
.    [1, 2, 4, 5, 7, 8]
.ok
.Trying:
.    def sieve(ints):
.        prime = ints.next()
.        yield prime
.        not_divisible_by_prime = exclude_multiples(prime, ints)
.        for p in sieve(not_divisible_by_prime):
.            yield p
.Expecting nothing
.ok
.Trying:
.    primes = sieve(intsfrom(2))
.Expecting nothing
.ok
.Trying:
.    firstn(primes, 20)
.Expecting:
.    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
.ok
.Trying:
.    def times(n, g):
.        for i in g:
.            yield n * i
.Expecting nothing
.ok
.Trying:
.    firstn(times(10, intsfrom(1)), 10)
.Expecting:
.    [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
.ok
.Trying:
.    def merge(g, h):
.        ng = g.next()
.        nh = h.next()
.        while 1:
.            if ng < nh:
.                yield ng
.                ng = g.next()
.            elif ng > nh:
.                yield nh
.                nh = h.next()
.            else:
.                yield ng
.                ng = g.next()
.                nh = h.next()
.Expecting nothing
.ok
.Trying:
.    def m235():
.        yield 1
.        me_times2 = times(2, m235())
.        me_times3 = times(3, m235())
.        me_times5 = times(5, m235())
.        for i in merge(merge(me_times2,
.                             me_times3),
.                       me_times5):
.            yield i
.Expecting nothing
.ok
.Trying:
.    result = m235()
.Expecting nothing
.ok
.Trying:
.    for i in range(3):
.        print firstn(result, 15)
.Expecting:
.    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]
.    [25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60, 64, 72, 75, 80]
.    [81, 90, 96, 100, 108, 120, 125, 128, 135, 144, 150, 160, 162, 180, 192]
.ok
.Trying:
.    class LazyList:
.        def __init__(self, g):
.            self.sofar = []
.            self.fetch = g.next
.
.        def __getitem__(self, i):
.            sofar, fetch = self.sofar, self.fetch
.            while i >= len(sofar):
.                sofar.append(fetch())
.            return sofar[i]
.Expecting nothing
.ok
.Trying:
.    def m235():
.        yield 1
.        # Gack:  m235 below actually refers to a LazyList.
.        me_times2 = times(2, m235)
.        me_times3 = times(3, m235)
.        me_times5 = times(5, m235)
.        for i in merge(merge(me_times2,
.                             me_times3),
.                       me_times5):
.            yield i
.Expecting nothing
.ok
.Trying:
.    m235 = LazyList(m235())
.Expecting nothing
.ok
.Trying:
.    for i in range(5):
.        print [m235[j] for j in range(15*i, 15*(i+1))]
.Expecting:
.    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]
.    [25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60, 64, 72, 75, 80]
.    [81, 90, 96, 100, 108, 120, 125, 128, 135, 144, 150, 160, 162, 180, 192]
.    [200, 216, 225, 240, 243, 250, 256, 270, 288, 300, 320, 324, 360, 375, 384]
.    [400, 405, 432, 450, 480, 486, 500, 512, 540, 576, 600, 625, 640, 648, 675]
.ok
.Trying:
.    def fibgen(a, b):
.
.        def sum(g, h):
.            while 1:
.                yield g.next() + h.next()
.
.        def tail(g):
.            g.next()    # throw first away
.            for x in g:
.                yield x
.
.        yield a
.        yield b
.        for s in sum(iter(fib),
.                     tail(iter(fib))):
.            yield s
.Expecting nothing
.ok
.Trying:
.    fib = LazyList(fibgen(1, 2))
.Expecting nothing
.ok
.Trying:
.    firstn(iter(fib), 17)
.Expecting:
.    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]
.ok
.Trying:
.    from itertools import tee
.Expecting nothing
.ok
.Trying:
.    def m235():
.        def _m235():
.            yield 1
.            for n in merge(times(2, m2),
.                           merge(times(3, m3),
.                                 times(5, m5))):
.                yield n
.        m1 = _m235()
.        m2, m3, m5, mRes = tee(m1, 4)
.        return mRes
.Expecting nothing
.ok
.Trying:
.    it = m235()
.Expecting nothing
.ok
.Trying:
.    for i in range(5):
.        print firstn(it, 15)
.Expecting:
.    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]
.    [25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60, 64, 72, 75, 80]
.    [81, 90, 96, 100, 108, 120, 125, 128, 135, 144, 150, 160, 162, 180, 192]
.    [200, 216, 225, 240, 243, 250, 256, 270, 288, 300, 320, 324, 360, 375, 384]
.    [400, 405, 432, 450, 480, 486, 500, 512, 540, 576, 600, 625, 640, 648, 675]
.ok
.Trying:
.    def fib():
.
.        def _isum(g, h):
.            while 1:
.                yield g.next() + h.next()
.
.        def _fib():
.            yield 1
.            yield 2
.            fibTail.next() # throw first away
.            for res in _isum(fibHead, fibTail):
.                yield res
.
.        realfib = _fib()
.        fibHead, fibTail, fibRes = tee(realfib, 3)
.        return fibRes
.Expecting nothing
.ok
.Trying:
.    firstn(fib(), 17)
.Expecting:
.    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]
.ok
.Trying:
.    def g():
.        i = me.next()
.        yield i
.Expecting nothing
.ok
.Trying:
.    me = g()
.Expecting nothing
.ok
.Trying:
.    me.next()
.Expecting:
.    Traceback (most recent call last):
.     ...
.      File "<string>", line 2, in g
.    ValueError: generator already executing
.ok
.Trying:
.    def f1():
.        try:
.            return
.        except:
.           yield 1
.Expecting nothing
.ok
.Trying:
.    print list(f1())
.Expecting:
.    []
.ok
.Trying:
.    def f2():
.        try:
.            raise StopIteration
.        except:
.            yield 42
.Expecting nothing
.ok
.Trying:
.    print list(f2())
.Expecting:
.    [42]
.ok
.Trying:
.    def f():
.        return 1//0
.Expecting nothing
.ok
.Trying:
.    def g():
.        yield f()  # the zero division exception propagates
.        yield 42   # and we'll never get here
.Expecting nothing
.ok
.Trying:
.    k = g()
.Expecting nothing
.ok
.Trying:
.    k.next()
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.      File "<stdin>", line 2, in g
.      File "<stdin>", line 2, in f
.    ZeroDivisionError: integer division or modulo by zero
.ok
.Trying:
.    k.next()  # and the generator cannot be resumed
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.    StopIteration
.ok
.Trying:
.    def f():
.        try:
.            yield 1
.            try:
.                yield 2
.                1//0
.                yield 3  # never get here
.            except ZeroDivisionError:
.                yield 4
.                yield 5
.                raise
.            except:
.                yield 6
.            yield 7     # the "raise" above stops this
.        except:
.            yield 8
.        yield 9
.        try:
.            x = 12
.        finally:
.            yield 10
.        yield 11
.Expecting nothing
.ok
.Trying:
.    print list(f())
.Expecting:
.    [1, 2, 4, 5, 8, 9, 10, 11]
.ok
.Trying:
.    class Tree:
.
.        def __init__(self, label, left=None, right=None):
.            self.label = label
.            self.left = left
.            self.right = right
.
.        def __repr__(self, level=0, indent="    "):
.            s = level*indent + repr(self.label)
.            if self.left:
.                s = s + "\n" + self.left.__repr__(level+1, indent)
.            if self.right:
.                s = s + "\n" + self.right.__repr__(level+1, indent)
.            return s
.
.        def __iter__(self):
.            return inorder(self)
.Expecting nothing
.ok
.Trying:
.    def tree(list):
.        n = len(list)
.        if n == 0:
.            return []
.        i = n // 2
.        return Tree(list[i], tree(list[:i]), tree(list[i+1:]))
.Expecting nothing
.ok
.Trying:
.    t = tree("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.Expecting nothing
.ok
.Trying:
.    def inorder(t):
.        if t:
.            for x in inorder(t.left):
.                yield x
.            yield t.label
.            for x in inorder(t.right):
.                yield x
.Expecting nothing
.ok
.Trying:
.    t = tree("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.Expecting nothing
.ok
.Trying:
.    for x in t:
.        print x,
.Expecting:
.    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
.ok
.Trying:
.    def inorder(node):
.        stack = []
.        while node:
.            while node.left:
.                stack.append(node)
.                node = node.left
.            yield node.label
.            while not node.right:
.                try:
.                    node = stack.pop()
.                except IndexError:
.                    return
.                yield node.label
.            node = node.right
.Expecting nothing
.ok
.Trying:
.    for x in t:
.        print x,
.Expecting:
.    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
.ok
.Trying:
.    import itertools
.Expecting nothing
.ok
.Trying:
.    def leak():
.        class gen:
.            def __iter__(self):
.                return self
.            def next(self):
.                return self.item
.        g = gen()
.        head, tail = itertools.tee(g)
.        g.item = head
.        return head
.Expecting nothing
.ok
.Trying:
.    it = leak()
.Expecting nothing
.ok
.Trying:
.    item = it.next()
.Expecting nothing
.ok
.Trying:
.    def leak():
.       def gen():
.           while True:
.               yield g
.       g = gen()
.Expecting nothing
.ok
.Trying:
.    leak()
.Expecting nothing
.ok
.Trying:
.    import sys, StringIO
.Expecting nothing
.ok
.Trying:
.    old = sys.stderr
.Expecting nothing
.ok
.Trying:
.    try:
.        sys.stderr = StringIO.StringIO()
.        class Leaker:
.            def __del__(self):
.                raise RuntimeError
.
.        l = Leaker()
.        del l
.        err = sys.stderr.getvalue().strip()
.        err.startswith(
.            "Exception exceptions.RuntimeError: RuntimeError() in <"
.        )
.        err.endswith("> ignored")
.        len(err.splitlines())
.    finally:
.        sys.stderr = old
.Expecting:
.    True
.    True
.    1
.ok
.Trying:
.    def f():
.        return 22
.        yield 1
.Expecting:
.    Traceback (most recent call last):
.      ..
.    SyntaxError: 'return' with argument inside generator (<doctest test.test_generators.__test__.syntax[0]>, line 3)
.ok
.Trying:
.    def f():
.        yield 1
.        return 22
.Expecting:
.    Traceback (most recent call last):
.      ..
.    SyntaxError: 'return' with argument inside generator (<doctest test.test_generators.__test__.syntax[1]>, line 3)
.ok
.Trying:
.    def f():
.        yield 1
.        return None
.Expecting:
.    Traceback (most recent call last):
.      ..
.    SyntaxError: 'return' with argument inside generator (<doctest test.test_generators.__test__.syntax[2]>, line 3)
.ok
.Trying:
.    def f():
.        yield 1
.        return
.Expecting nothing
.ok
.Trying:
.    def f():
.        try:
.            yield 1
.        finally:
.            pass
.Expecting nothing
.ok
.Trying:
.    def f():
.        try:
.            try:
.                1//0
.            except ZeroDivisionError:
.                yield 666
.            except:
.                pass
.        finally:
.            pass
.Expecting nothing
.ok
.Trying:
.    def f():
.        try:
.            try:
.                yield 12
.                1//0
.            except ZeroDivisionError:
.                yield 666
.            except:
.                try:
.                    x = 12
.                finally:
.                    yield 12
.        except:
.            return
.Expecting nothing
.ok
.Trying:
.    list(f())
.Expecting:
.    [12, 666]
.ok
.Trying:
.    def f():
.       yield
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.       if 0:
.           yield
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.        if 0:
.            yield 1
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.       if "":
.           yield None
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.        return
.        try:
.            if x==4:
.                pass
.            elif 0:
.                try:
.                    1//0
.                except SyntaxError:
.                    pass
.                else:
.                    if 0:
.                        while 12:
.                            x += 1
.                            yield 2 # don't blink
.                            f(a, b, c, d, e)
.            else:
.                pass
.        except:
.            x = 1
.        return
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.        if 0:
.            def g():
.                yield 1
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'NoneType'>
.ok
.Trying:
.    def f():
.        if 0:
.            class C:
.                def __init__(self):
.                    yield 1
.                def f(self):
.                    yield 2
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'NoneType'>
.ok
.Trying:
.    def f():
.        if 0:
.            return
.        if 0:
.            yield 2
.Expecting nothing
.ok
.Trying:
.    type(f())
.Expecting:
.    <type 'generator'>
.ok
.Trying:
.    def f():
.        if 0:
.            lambda x:  x        # shouldn't trigger here
.            return              # or here
.            def f(i):
.                return 2*i      # or here
.            if 0:
.                return 3        # but *this* sucks (line 8)
.        if 0:
.            yield 2             # because it's a generator (line 10)
.Expecting:
.    Traceback (most recent call last):
.    SyntaxError: 'return' with argument inside generator (<doctest test.test_generators.__test__.syntax[24]>, line 10)
.ok
.Trying:
.    def f():
.        for i in range(3):
.            try:
.                continue
.            finally:
.                yield i
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    print g.next()
.Expecting:
.    0
.ok
.Trying:
.    print g.next()
.Expecting:
.    1
.ok
.Trying:
.    print g.next()
.Expecting:
.    2
.ok
.Trying:
.    print g.next()
.Expecting:
.    Traceback (most recent call last):
.    StopIteration
.ok
.Trying:
.    def f():
.       yield 1
.       yield 2
.Expecting nothing
.ok
.Trying:
.    for i in f():
.        print i
.Expecting:
.    1
.    2
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting:
.    1
.ok
.Trying:
.    g.next()
.Expecting:
.    2
.ok
.Trying:
.    g.next()
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.      File "<stdin>", line 2, in g
.    StopIteration
.ok
.Trying:
.    def f():
.        yield 1
.        return
.        yield 2 # never reached
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting:
.    1
.ok
.Trying:
.    g.next()
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.      File "<stdin>", line 3, in f
.    StopIteration
.ok
.Trying:
.    g.next() # once stopped, can't be resumed
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.    StopIteration
.ok
.Trying:
.    def f():
.        yield 1
.        raise StopIteration
.        yield 2 # never reached
.Expecting nothing
.ok
.Trying:
.    g = f()
.Expecting nothing
.ok
.Trying:
.    g.next()
.Expecting:
.    1
.ok
.Trying:
.    g.next()
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.    StopIteration
.ok
.Trying:
.    g.next()
.Expecting:
.    Traceback (most recent call last):
.      File "<stdin>", line 1, in ?
.    StopIteration
.ok
.Trying:
.    def g1():
.        try:
.            return
.        except:
.            yield 1
.Expecting nothing
.ok
.Trying:
.    list(g1())
.Expecting:
.    []
.ok
.Trying:
.    def g2():
.        try:
.            raise StopIteration
.        except:
.            yield 42
.Expecting nothing
.ok
.Trying:
.    print list(g2())
.Expecting:
.    [42]
.ok
.Trying:
.    def g3():
.        try:
.            return
.        finally:
.            yield 1
.Expecting nothing
.ok
.Trying:
.    list(g3())
.Expecting:
.    [1]
.ok
.Trying:
.    def yrange(n):
.        for i in range(n):
.            yield i
.Expecting nothing
.ok
.Trying:
.    list(yrange(5))
.Expecting:
.    [0, 1, 2, 3, 4]
.ok
.Trying:
.    def creator():
.        r = yrange(5)
.        print "creator", r.next()
.        return r
.Expecting nothing
.ok
.Trying:
.    def caller():
.        r = creator()
.        for i in r:
.                print "caller", i
.Expecting nothing
.ok
.Trying:
.    caller()
.Expecting:
.    creator 0
.    caller 1
.    caller 2
.    caller 3
.    caller 4
.ok
.Trying:
.    def zrange(n):
.        for i in yrange(n):
.            yield i
.Expecting nothing
.ok
.Trying:
.    list(zrange(5))
.Expecting:
.    [0, 1, 2, 3, 4]
.ok
.Trying:
.    import weakref
.Expecting nothing
.ok
.Trying:
.    def gen():
.        yield 'foo!'
.Expecting nothing
.ok
.Trying:
.    wr = weakref.ref(gen)
.Expecting nothing
.ok
.Trying:
.    wr() is gen
.Expecting:
.    True
.ok
.Trying:
.    p = weakref.proxy(gen)
.Expecting nothing
.ok
.Trying:
.    gi = gen()
.Expecting nothing
.ok
.Trying:
.    wr = weakref.ref(gi)
.Expecting nothing
.ok
.Trying:
.    wr() is gi
.Expecting:
.    True
.ok
.Trying:
.    p = weakref.proxy(gi)
.Expecting nothing
.ok
.Trying:
.    list(p)
.Expecting:
.    ['foo!']
.ok
.15 items had no tests:
.    test.test_generators
.    test.test_generators.Knights
.    test.test_generators.Knights.__init__
.    test.test_generators.Knights._init_board
.    test.test_generators.Knights.coords2index
.    test.test_generators.Knights.index2coords
.    test.test_generators.Knights.printsolution
.    test.test_generators.Knights.solve
.    test.test_generators.Queens
.    test.test_generators.Queens.__init__
.    test.test_generators.Queens.printsolution
.    test.test_generators.Queens.solve
.    test.test_generators.conjoin
.    test.test_generators.flat_conjoin
.    test.test_generators.test_main
.9 items passed all tests:
.  12 tests in test.test_generators.__test__.conjoin
.  95 tests in test.test_generators.__test__.coroutine
.  31 tests in test.test_generators.__test__.email
.  27 tests in test.test_generators.__test__.fun
.  22 tests in test.test_generators.__test__.pep
.   9 tests in test.test_generators.__test__.refleaks
.  31 tests in test.test_generators.__test__.syntax
.  29 tests in test.test_generators.__test__.tut
.  10 tests in test.test_generators.__test__.weakref
.266 tests in 24 items.
.266 passed and 0 failed.
.Test passed.
.doctest (test.test_generators) ... 266 tests with zero failures
.

END
test_name=doctest/b/test.test_generators.__test__.conjoin
status=P
start_time=2009-08-12 17:09:28.560
end_time=2009-08-12 17:09:28.581
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.coroutine
status=P
start_time=2009-08-12 17:09:28.581
end_time=2009-08-12 17:09:28.588
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.email
status=P
start_time=2009-08-12 17:09:28.590
end_time=2009-08-12 17:09:28.595
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.fun
status=P
start_time=2009-08-12 17:09:28.596
end_time=2009-08-12 17:09:28.606
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.pep
status=P
start_time=2009-08-12 17:09:28.606
end_time=2009-08-12 17:09:28.610
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.refleaks
status=P
start_time=2009-08-12 17:09:28.611
end_time=2009-08-12 17:09:28.612
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.syntax
status=P
start_time=2009-08-12 17:09:28.613
end_time=2009-08-12 17:09:28.616
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.tut
status=P
start_time=2009-08-12 17:09:28.617
end_time=2009-08-12 17:09:28.619
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_generators.__test__.weakref
status=P
start_time=2009-08-12 17:09:28.620
end_time=2009-08-12 17:09:28.620
tda_testtype=<class 'nose.plugins.doctests.DocTestCase'>
END
test_name=doctest/b/test.test_netrc.NetrcTestCase.test_case_1
status=P
start_time=2009-08-12 17:09:28.926
end_time=2009-08-12 17:09:28.928
tda_testtype=<class 'test.test_netrc.NetrcTestCase'>
END
test_name=doctest/b/test.test_netrc.test_main
status=P
start_time=2009-08-12 17:09:28.929
end_time=2009-08-12 17:09:28.932
tda_testtype=<class 'nose.case.FunctionTestCase'>
log:
.test_case_1 (test.test_netrc.NetrcTestCase) ... ok
.
.----------------------------------------------------------------------
.Ran 1 test in 0.002s
.
.OK
.

END
test_name=doctest/b/test.test_sort.TestBase.testStressfully
status=P
start_time=2009-08-12 17:09:29.241
end_time=2009-08-12 17:09:29.399
tda_testtype=<class 'test.test_sort.TestBase'>
log:
.Testing size 0
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 1
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 2
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 3
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 3
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 4
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 5
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 7
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 8
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 9
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 15
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 16
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 17
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 31
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 32
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 33
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(0) Complains(2)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 63
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 64
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 65
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(40) Complains(39)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 127
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 128
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 129
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 255
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(54) Complains(58)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 256
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 257
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(46) Complains(90)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 511
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(71) Complains(97)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 512
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(109) Complains(129)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 513
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(324) Complains(338)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 10
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 100
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(15) Complains(24)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 1000
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(623) Complains(667)
.    checking exception during sort left some permutation
.    checking stability
.

END
test_name=doctest/b/test.test_sort.TestBugs.test_bug453523
status=P
start_time=2009-08-12 17:09:29.401
end_time=2009-08-12 17:09:29.401
tda_testtype=<class 'test.test_sort.TestBugs'>
END
test_name=doctest/b/test.test_sort.TestBugs.test_cmpNone
status=P
start_time=2009-08-12 17:09:29.401
end_time=2009-08-12 17:09:29.401
tda_testtype=<class 'test.test_sort.TestBugs'>
END
test_name=doctest/b/test.test_sort.TestBugs.test_undetected_mutation
status=P
start_time=2009-08-12 17:09:29.401
end_time=2009-08-12 17:09:29.402
tda_testtype=<class 'test.test_sort.TestBugs'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_badcmp_with_key
status=P
start_time=2009-08-12 17:09:29.402
end_time=2009-08-12 17:09:29.402
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_baddecorator
status=P
start_time=2009-08-12 17:09:29.402
end_time=2009-08-12 17:09:29.402
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_cmp_and_key_combination
status=P
start_time=2009-08-12 17:09:29.403
end_time=2009-08-12 17:09:29.403
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_decorated
status=P
start_time=2009-08-12 17:09:29.403
end_time=2009-08-12 17:09:29.403
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_key_with_exception
status=P
start_time=2009-08-12 17:09:29.403
end_time=2009-08-12 17:09:29.403
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_key_with_mutating_del
status=P
start_time=2009-08-12 17:09:29.403
end_time=2009-08-12 17:09:29.403
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_key_with_mutating_del_and_exception
status=P
start_time=2009-08-12 17:09:29.404
end_time=2009-08-12 17:09:29.404
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_key_with_mutation
status=P
start_time=2009-08-12 17:09:29.404
end_time=2009-08-12 17:09:29.404
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_reverse
status=P
start_time=2009-08-12 17:09:29.404
end_time=2009-08-12 17:09:29.404
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_reverse_stability
status=P
start_time=2009-08-12 17:09:29.405
end_time=2009-08-12 17:09:29.406
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.TestDecorateSortUndecorate.test_stability
status=P
start_time=2009-08-12 17:09:29.407
end_time=2009-08-12 17:09:29.407
tda_testtype=<class 'test.test_sort.TestDecorateSortUndecorate'>
END
test_name=doctest/b/test.test_sort.test_main
status=P
start_time=2009-08-12 17:09:29.408
end_time=2009-08-12 17:09:29.567
tda_testtype=<class 'nose.case.FunctionTestCase'>
log:
.testStressfully (test.test_sort.TestBase) ... Testing size 0
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 1
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 2
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 3
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 3
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 4
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 5
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 7
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 8
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 9
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 15
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 16
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 17
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 31
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 32
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 33
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 63
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 64
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 65
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 127
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 128
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 129
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 255
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(178) Complains(210)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 256
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 257
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 511
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(383) Complains(432)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 512
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(74) Complains(76)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 513
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(176) Complains(62)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 10
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.    checking stability
.Testing size 100
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(33) Complains(34)
.    checking exception during sort left some permutation
.    checking stability
.Testing size 1000
.    checking identity
.    checking reversed
.    checking random permutation
.    checking reversed via function
.    Checking against an insane comparison function.
.        If the implementation isn't careful, this may segfault.
.    checking an insane function left some permutation
.        complaining at Complains(157) Complains(136)
.    checking exception during sort left some permutation
.    checking stability
.ok
.test_badcmp_with_key (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_baddecorator (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_cmp_and_key_combination (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_decorated (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_key_with_exception (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_key_with_mutating_del (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_key_with_mutating_del_and_exception (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_key_with_mutation (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_reverse (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_reverse_stability (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_stability (test.test_sort.TestDecorateSortUndecorate) ... ok
.test_bug453523 (test.test_sort.TestBugs) ... ok
.test_cmpNone (test.test_sort.TestBugs) ... ok
.test_undetected_mutation (test.test_sort.TestBugs) ... ok
.
.----------------------------------------------------------------------
.Ran 15 tests in 0.159s
.
.OK
.

END


START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/testfiles/c/1.sh
test_runner=shell_runner
context=default_context
SETDEFAULT
test_name=testfiles/c//1.sh
start_time=2009-08-12 17:09:29
end_time=2009-08-12 17:09:29
status=P
tra_exitcode=0
log:
.test 1 ok


END


START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/testfiles/c/2.py
test_runner=nose
context=default_context
SETDEFAULT
test_name=testfiles/c/2.test
status=P
start_time=2009-08-12 17:09:30.170
end_time=2009-08-12 17:09:30.170
tda_testtype=<class 'nose.case.FunctionTestCase'>
log:
.test 2 ok
.

END


START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/testfiles/c/3.xml
test_runner=regtest
context=default_context
SETDEFAULT
status=E
start_time=1250111370
tda_title=testfiles 3 
end_time=1250111370
test_name=testfiles/c/3
log:
.. Regression system starting with IRAF environment /usr/stsci/irafdev/iraf/ on banana.stsci.edu
.
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.File:    /Users/sienkiew/work/test/tests/testfiles/c/3.xml
.Title:   testfiles 3 
.. Test title: testfiles 3 
.. Regression test started: Wed Aug 12 17:09:30 2009
.. In directory: /Users/sienkiew/work/test/tests/testfiles/c
.. File:   /Users/sienkiew/work/test/tests/testfiles/c/3.xml
.. removing output file test_3.out before starting test
.testfiles 3 ok
.? Reference comparison file not found (test_3.ref)
.! Regression test failed (testfiles 3 )

END


START
test_run=demo_2
project=sample
host=banana
location=/Users/sienkiew/work/test/tests/testfiles/c/4.xml
test_runner=regtest
context=default_context
SETDEFAULT
status=E
start_time=1250111371
tda_title=testfiles 4 
end_time=1250111371
test_name=testfiles/c/4
log:
.. Regression system starting with IRAF environment /usr/stsci/irafdev/iraf/ on banana.stsci.edu
.
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
.File:    /Users/sienkiew/work/test/tests/testfiles/c/4.xml
.Title:   testfiles 4 
.. Test title: testfiles 4 
.. Regression test started: Wed Aug 12 17:09:31 2009
.. In directory: /Users/sienkiew/work/test/tests/testfiles/c
.. File:   /Users/sienkiew/work/test/tests/testfiles/c/4.xml
.. removing output file test_4.out before starting test
.testfiles 4 ok
.? Reference comparison file not found (test_4.ref)
.! Regression test failed (testfiles 4 )

END
