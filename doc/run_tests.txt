================================================================================
Using Pandokia To Run Tests
================================================================================

:abstract:

	This document describes how to use the Pandokia Meta-Runner to
	execute your tests.

	The Meta-Runner identifies tests, sets up an appropriate execution
	environment, and invokes a Test-Runner to actually performs
	the tests.  If parallelism is appropriate for your tests, you
	can direct it to run multiple tests concurrently.

	The Meta-Runner has provisions for enabling/disabling tests and
	for setting environment variables before the test is executed.

	A Test-Runner is a Pandokia component that implements a standard
	interface between the Meta-Runner and some specific test execution
	software.  For example, the "nose" Test-Runner uses nose 0.11
	(along with a nose plugin) to run tests.

	See adding_runners.txt for documentation on implementing your
	own Test-Runner for whatever testing systems you have.

.. contents::

Simple Overview
--------------------------------------------------------------------------------


There are three ways to run tests with the Pandokia Meta-Runner:

 - You can recursively run all the tests discovered in a directory tree ::

	pdk run -r directory

	pdk run -recursive directory

 - If you want to run all the tests in a specific directory, you can give a list of specific directory names ::

	pdk run /where/your/tests/are

 - You can give the name(s) of specific files that contain your tests ::

	pdk run xyz*.py

All of these cases create or append to a Pandokia Log File, which contains the results from
all the tests.  

There is also a command "pdkrun" that you can use in place of "pdk run".  It exists principally so that I can type::

	!pdkrun

to repeat the last pdkrun command.


pdk run --recursive *directory*
--------------------------------------------------------------------------------

When you give ``--recursive``, pandokia recursively descends into the
directory tree that you specify.  In each directory, pandokia finds
and runs tests by executing the command "pdk run *directory*".  If no
tests are found in a directory, zero test results are reported from
that directory.

The configuration variable ``exclude_dirs`` contains a list of directory
names to skip.  (see pandokia/default_config.py)

You can specifiy multiple processes with the option ``--parallel N``
or the environment variable ``PDK_PARALLEL``.  It will execute tests
in that many directories concurrently.  It will not execute multiple
concurrent processes in a single directory because we have found that
the tests often interfere with each other. (This may be a
characteristic of our test environment, which depends heavily on input
and output files.)


pdk run *directory*
--------------------------------------------------------------------------------

When you give the name of a directory, it compares the name of each
regular file (not directories or device files) in that directory with
a set of glob patterns that identify tests.

The file is disabled if the same base file name exists with the
extension ".disable".  That is, if your test is test_xyz.py and there
is also a file test_xyz.disable, then the tests in test_xyz.py will
not be executed.  The test report will contains status=D (for
disabled) for each test in that file. (It is possible that some
Test-Runners do not know how to report the names of disabled tests.
The *nose* Test-Runner included in the Pandokia distribution does.)

If the file name looks like a test and it is not disabled, the test is
executed by the same code that implements ``pdk run *filename*``.


pdk run *file*
--------------------------------------------------------------------------------

When you give the name of a specific file, pdk run executes the
tests in that file.  It runs the tests even if the .disable file
exists.


pdk run arguments and environment variables
--------------------------------------------------------------------------------

``pdk run`` can take parameters as environment variables and as command line
arguments.  Arguments always override the value in an environment variable.

Except as noted, all of the options can be used with any of the variations of
``pdk run``.


--log      or PDK_LOG: 
   The series of test results will be written into this file, for
   subsequent import into the database. 
   Default value is "PDK_DEFAULT.LOG."+test_run

--parallel or PDK_PARALLEL 
   Run up to this number of tests concurrently (but it will run at
   most one test at a time in any given directory).
   Only used with the -r (recursive) flag.
   Default value is 1.

--project  or PDK_PROJECT
   Use this as the project name.
   Default value is "default".

--test_run or PDK_TEST_RUN
  Use this as the name of the test run.
  Default value is a generated string including the user name and the
  time to the nearest minute. 

The following environment variables are reserved for internal use by
pandokia, or for implementation in a future release:

PDK_CONTEXT 
PDK_FILE 
PDK_TESTPREFIX 
PDK_PROCESS_SLOT 


Creating a Test Tree
--------------------------------------------------------------------------------
Pandokia will preserve the hierarchy of your test tree as part of the
test name. You can populate the directory tree with files containing
tests in any organization that makes sense for your project. 

The test running concurrency operates at directory granularity; so do
the environment and contact files. You may wish to take this into
account when creating the tree.

Place an empty file named pandokia_top at the top of the directory
tree.

Overhead files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pandokia_top
  This is an empty file marking the top of the directory tree.

pdk_environment
  This is an INI-style file that may be used to customize the environment
  for the tests in this directory. It should contain named
  sections. The [default] section will apply to all tests; additional
  sections based on operating system ([os=foo] or [osver=foo]),
  machine architecture ([cpu=foo]), or hostname ([hostname=foo]) may
  also be included, and are applied hierarchically in that order.

  Specifications of OS, version, or architecture are
  expected to be site-specific. We implemented a mapping that makes
  sense in our system; you may wish to examine and/or customize the
  env_platforms.py file.

  The resulting environment will be merged with os.environ prior to
  running tests; in particular, any PATH environment variable is handled
  specially, and appended to (rather than overriding) existing values at
  a higher level.

pdk_contacts
  This file may be used to specify the username or email address of
  individuals (one per line) who should be notified about anomalous
  results for tests contained in this directory. The run command does
  not read this file; see database.txt, "Importing Contacts" for more
  detail. 

*.snout
  This file may be used to specify a list of installed packages or
  modules for which tests can be run in the installed directory. In
  general we expect these to be doctests, but this is not a
  requirement. Nose will be used as the test runner for tests found in
  these directories. 

Writing a nose test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pandokia will support any type of test that nose supports: unittests,
doctests, and arbitrary test functions that raise assertion errors if
they fail.

unittest/testcase style
.......................

# This example shows how to add attributes to a unittest-style test.

class BasicTest(unittest.TestCase):
    def setUp(self):
        self.tda={}
        self.tra={}
        self.tda['foo']='bar'

    def test1(self):
        self.tda['func']='add'
        self.tra['sum']=4+2

        # If the assertion fails, the test fails.
        self.assert_(4+2==6)


Any old function
................

#TDAs and TRAs are supported via global variables. The
#plugin takes care of clearing them so there is no crosstalk
#between tests.

tda = dict()
tra = dict()

def testxyz() :
        tda['cat']='tortoiseshell'
        # If the assertion fails, the test fails
        assert True

def testabc():
        tda['func']='add'
        sum=4+2
        tra['sum']=sum
        assert sum == 6

def testglobal():
        global tda
        tda = {'cat':'lion'}
        #The global statement is necessary in order to avoid rebinding
        #rebinds the name to a local variable, which will not be seen
        #by Pandokia
        assert True


doctest
.......

#TDAs and TRAs are not supported in doctests. 
"""
>>> print 1+1
2

>>> print 7-3
4
"""



Using file comparators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TBD, but see example_filetest.py in this directory.



