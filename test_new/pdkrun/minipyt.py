import os
import pandokia.helpers.test_in_db as test_in_db

test_in_db.query['test_name'] = 'pdkrun_test_data/minipyt/*'

expected_results = [
    #  test_name,
    #       dict of values for equivalence
    #
    # remember the db access library automatically converts things that look like numbers to float

	( 'pdkrun_test_data/minipyt/assert_on_import_f',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/assert_on_import_p',
		{ 'status' : 'P' } ),

	( 'pdkrun_test_data/minipyt/attr.class_setup_exception',
		{ 'status' : 'E', 'tra_exception' : "Exception('ARF',)",
            'tda_classsetup' : 'class setup', 
            'tda_classteardown' : 'class teardown' } ),

	( 'pdkrun_test_data/minipyt/attr.not_shared.test_1',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : None, 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup',
            'tda_test' : 'test_1', 'tra_test' : 'test_1',
            'tda_test2' : None, 'tra_test2' : None,
            'tra_n' : 1 } ),
	( 'pdkrun_test_data/minipyt/attr.not_shared.test_2',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : None, 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup',
            'tda_test2' : 'test_2', 'tra_test2' : 'test_2',
            'tda_test' : None, 'tra_test' : None,
            'tra_n' : 1 } ),
	( 'pdkrun_test_data/minipyt/attr.not_shared',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : None, 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup' } ),

	( 'pdkrun_test_data/minipyt/attr.setup_exception.test_1',
		{ 'status' : 'E', 'tda_classsetup' : 'class setup', 
            'tda_classteardown' : None, 'tda_setup' : 'setup', 
            'tda_teardown' : 'teardown',  "tra_exception" : "Exception('ARF',)", } ),
	( 'pdkrun_test_data/minipyt/attr.setup_exception.test_2',
		{ 'status' : 'E', 'tda_classsetup' : 'class setup', 
            'tda_classteardown' : None, 'tda_setup' : 'setup', 
            'tda_teardown' : 'teardown',  "tra_exception" : "Exception('ARF',)", } ),
	( 'pdkrun_test_data/minipyt/attr.setup_exception',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 
            'tda_classteardown' : 'class teardown', 'tda_setup' : 'setup', 
            'tda_teardown' : 'teardown', } ),

	( 'pdkrun_test_data/minipyt/attr.shared.test_1',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : None, 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup',
            'tda_test' : 'test_1', 'tra_test' : 'test_1',
            'tda_test2' : None, 'tra_test2' : None,
            'tra_n' : 1 } ),
	( 'pdkrun_test_data/minipyt/attr.shared.test_2',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : None, 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup',
            'tda_test2' : 'test_2', 'tra_test2' : 'test_2',
            'tda_test' : None, 'tra_test' : None,
            'tra_n' : 2 } ),
	( 'pdkrun_test_data/minipyt/attr.shared',
		{ 'status' : 'P', 'tda_classsetup' : 'class setup', 'tda_setup': 'setup', 
            'tda_teardown' : 'teardown', 'tda_classteardown' : 'class teardown', 
            'tra_setup' : 'setup', 'tra_classsetup' : 'class setup' } ),
	( 'pdkrun_test_data/minipyt/attr',
		{ 'status' : 'P', 'tda_module' : 'this is a module tda' } ),

	( 'pdkrun_test_data/minipyt/class_1.init_f',
		{ 'status' : 'E',
             'tra_exception' : 'AssertionError()', # during setup
             } ),
	( 'pdkrun_test_data/minipyt/class_1.init_p',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/class_1',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/class_2',
		{ 'status' : 'P' } ),

	( 'pdkrun_test_data/minipyt/disables.class_active.test1',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.class_active.test2',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.class_active.test3',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.class_active',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.class_disable',
		{ 'status' : 'D' } ),
	( 'pdkrun_test_data/minipyt/disables.class_partial.test1',
		{ 'status' : 'D' } ),
	( 'pdkrun_test_data/minipyt/disables.class_partial.test2',
		{ 'status' : 'D' } ),
	( 'pdkrun_test_data/minipyt/disables.class_partial.test3',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.class_partial',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.function_active',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/disables.function_disable',
		{ 'status' : 'D' } ),
	( 'pdkrun_test_data/minipyt/disables',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function.test_p',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function.test_f',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/function.test_e',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/function.minipyt_decorated',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function.fn_with_tda',
		{ 'status' : 'P', 'tda_tda_1' : 1, 'tda_tda_2' : 2 } ),
	( 'pdkrun_test_data/minipyt/function.fn_with_tra',
		{ 'status' : 'P', 'tra_tra_1' : 1, 'tra_tra_2' : 2  } ),
	( 'pdkrun_test_data/minipyt/function.fn_with_attributes',
		{ 'status' : 'F', 'tda_tda_1' : 1, 'tda_tda_2' : 2,
		    'tra_tra_1' : 1, 'tra_tra_2' : 2  } ),
	( 'pdkrun_test_data/minipyt/function.fn_nose_decorated',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_raises_does',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_raises_not',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_timed_asserts',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_timed_exc',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_timed_nok',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/function.test_nose_timed_ok',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/function',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/import_exception',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/import_fpe',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/import_syntax_error',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s1',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s2',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s3',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s4',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s5',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s6',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s7',
		{ 'status' : 'E' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_s8',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_1',
		{ 'status' : 'F' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate.test_2',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/nose_decorate',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_4.test_4_2',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_4.test_4_3',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_4.test_4_1',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_4',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_2',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_3',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order.test_1',
		{ 'status' : 'P' } ),
	( 'pdkrun_test_data/minipyt/order',
		{ 'status' : 'P' } ),
]

test_in_db.perform_db_tests( test_in_db.query , expected_results )

